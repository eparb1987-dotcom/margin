import requests
import pandas as pd
from io import StringIO
from datetime import datetime, timedelta
import time
import html

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
CLIENT_ID = "1653402"
API_KEY = "12f1d60d-599c-488f-a2f2-e4c62b618715"
HEADERS = {
    "Client-Id": CLIENT_ID,
    "Api-Key": API_KEY,
    "Content-Type": "application/json"
}

TELEGRAM_BOT_TOKEN = "8266257254:AAGMl9dhAJOYkmOiyuRB1Z1ftHmp4L7kDwA"
TELEGRAM_CHAT_ID = "-1002925992178"

# ========== –¶–µ–Ω—ã –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è ==========
COST_PER_UNIT = {
    "–ß-—Å—Ç–µ–∫–ª–æ –±–µ–∂–µ–≤—ã–π": 82, "–ß-—Å—Ç–µ–∫–ª–æ —Ä–æ–∑–æ–≤—ã–π": 82,
    "–ë-—Å—Ç–µ–∫–ª–æ —Ä–æ–∑–æ–≤—ã–π": 62, "–ë-—Å—Ç–µ–∫–ª–æ –±–µ–∂–µ–≤—ã–π": 62,
    "–ë-—Å—Ç–µ–∫–ª–æ —Å–µ—Ä—ã–π": 62, "–ß-—Å—Ç–µ–∫–ª–æ —Å–µ—Ä—ã–π": 82,
    "–ß-—Å—Ç–µ–∫–ª–æ —Å–∏–Ω–∏–π": 82, "–ë-—Å—Ç–µ–∫–ª–æ —Å–∏–Ω–∏–π": 62,
    "–ë-—Å—Ç–µ–∫–ª–æ –±–µ–ª—ã–π": 62, "–ß-—Å—Ç–µ–∫–ª–æ –±–µ–ª—ã–π": 82,
    "–ß-—Ü–∏—Ä–∫–æ–Ω –º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä": 197, "–ß-—Ü–∏—Ä–∫–æ–Ω –∂–µ–ª—Ç—ã–π": 197,
    "–ß-–≥—Ä–∞–Ω–∞—Ç": 192, "–ß-—Ç—É—Ä–º–∞–ª–∏–Ω —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π": 207,
    "–ß-—Ö—Ä–∏–∑–æ–ø—Ä–∞–∑ –∑–µ–ª–µ–Ω—ã–π": 82, "–ë-—Ü–∏—Ä–∫–æ–Ω –º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä": 122,
    "–ë-—Ü–∏—Ä–∫–æ–Ω –∂–µ–ª—Ç—ã–π": 122, "–ë-–≥—Ä–∞–Ω–∞—Ç": 92,
    "–ë-—Ç—É—Ä–º–∞–ª–∏–Ω —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π": 112, "–ë-—Ö—Ä–∏–∑–æ–ø—Ä–∞–∑ –∑–µ–ª–µ–Ω—ã–π": 62,
    "–ß-—Å—Ç–µ–∫–ª–æ –∑–µ–ª–µ–Ω—ã–π": 82, "–ë-—Å—Ç–µ–∫–ª–æ –∑–µ–ª–µ–Ω—ã–π": 62,
    "–ë-—Å—Ç–µ–∫–ª–æ —è—Ä–∫–æ-—Å–∏–Ω–∏–π": 62, "–ß-—Å—Ç–µ–∫–ª–æ —è—Ä–∫–æ-—Å–∏–Ω–∏–π": 82,
    "–ë-—á–µ—Ä–Ω–∞—è —à–ø–∏–Ω–µ–ª—å": 62, "–ß-—á–µ—Ä–Ω–∞—è —à–ø–∏–Ω–µ–ª—å": 82,
    "–ß-–º–∞–π–æ—Ä–∫–∞": 107
}

ARTICLE_SKU_MAP = {
    "–ß-—Å—Ç–µ–∫–ª–æ –±–µ–∂–µ–≤—ã–π": 1398656980, "–ß-—Å—Ç–µ–∫–ª–æ —Ä–æ–∑–æ–≤—ã–π": 1398734906,
    "–ë-—Å—Ç–µ–∫–ª–æ —Ä–æ–∑–æ–≤—ã–π": 1398858209, "–ë-—Å—Ç–µ–∫–ª–æ –±–µ–∂–µ–≤—ã–π": 1398874577,
    "–ë-—Å—Ç–µ–∫–ª–æ —Å–µ—Ä—ã–π": 1469625290, "–ß-—Å—Ç–µ–∫–ª–æ —Å–µ—Ä—ã–π": 1469696965,
    "–ß-—Å—Ç–µ–∫–ª–æ —Å–∏–Ω–∏–π": 1469718985, "–ë-—Å—Ç–µ–∫–ª–æ —Å–∏–Ω–∏–π": 1469742088,
    "–ë-—Å—Ç–µ–∫–ª–æ –±–µ–ª—ã–π": 1469762419, "–ß-—Å—Ç–µ–∫–ª–æ –±–µ–ª—ã–π": 1469767310,
    "–ß-—Ü–∏—Ä–∫–æ–Ω –º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä": 1610548211, "–ß-—Ü–∏—Ä–∫–æ–Ω –∂–µ–ª—Ç—ã–π": 1610566271,
    "–ß-–≥—Ä–∞–Ω–∞—Ç": 1610580380, "–ß-—Ç—É—Ä–º–∞–ª–∏–Ω —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π": 1610597425,
    "–ß-—Ö—Ä–∏–∑–æ–ø—Ä–∞–∑ –∑–µ–ª–µ–Ω—ã–π": 1610647254, "–ë-—Ü–∏—Ä–∫–æ–Ω –º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä": 1610836706,
    "–ë-—Ü–∏—Ä–∫–æ–Ω –∂–µ–ª—Ç—ã–π": 1610850272, "–ë-–≥—Ä–∞–Ω–∞—Ç": 1610876456,
    "–ë-—Ç—É—Ä–º–∞–ª–∏–Ω —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π": 1611024636, "–ë-—Ö—Ä–∏–∑–æ–ø—Ä–∞–∑ –∑–µ–ª–µ–Ω—ã–π": 1611198277,
    "–ß-—Å—Ç–µ–∫–ª–æ –∑–µ–ª–µ–Ω—ã–π": 1874983173, "–ë-—Å—Ç–µ–∫–ª–æ –∑–µ–ª–µ–Ω—ã–π": 1874997019,
    "–ë-—Å—Ç–µ–∫–ª–æ —è—Ä–∫–æ-—Å–∏–Ω–∏–π": 1905088221, "–ß-—Å—Ç–µ–∫–ª–æ —è—Ä–∫–æ-—Å–∏–Ω–∏–π": 1905104585,
    "–ë-—á–µ—Ä–Ω–∞—è —à–ø–∏–Ω–µ–ª—å": 1905127879, "–ß-—á–µ—Ä–Ω–∞—è —à–ø–∏–Ω–µ–ª—å": 1905140709,
    "–ß-–º–∞–π–æ—Ä–∫–∞": 1944503998
}

# ========== –£—Ç–∏–ª–∏—Ç—ã ==========
def chunks(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def escape(text):
    return html.escape(str(text))

# ========== –î–∞—Ç—ã ==========
today = datetime.now()
yesterday = today - timedelta(days=1)
two_months_ago = today - timedelta(days=62)

processed_at_from = two_months_ago.strftime("%Y-%m-%dT00:00:00.000Z")
processed_at_to = yesterday.strftime("%Y-%m-%dT23:59:59.999Z")
yesterday_from = yesterday.strftime("%Y-%m-%dT00:00:00.000Z")
yesterday_to = yesterday.strftime("%Y-%m-%dT23:59:59.999Z")

# ========== –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ==========
create_url = "https://api-seller.ozon.ru/v1/report/postings/create"
create_payload = {
    "filter": {
        "processed_at_from": processed_at_from,
        "processed_at_to": processed_at_to,
        "delivery_schema": ["fbo"],
        "sku": []
    },
    "language": "DEFAULT"
}
create_resp = requests.post(create_url, json=create_payload, headers=HEADERS)
create_resp.raise_for_status()
code = create_resp.json().get("result", {}).get("code")
if not code:
    raise SystemExit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å code –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")

info_url = "https://api-seller.ozon.ru/v1/report/info"
file_url = None
for _ in range(20):
    info_resp = requests.post(info_url, json={"code": code}, headers=HEADERS)
    info_resp.raise_for_status()
    info_result = info_resp.json().get("result", {})
    if info_result.get("status") == "success":
        file_url = info_result.get("file")
        break
    time.sleep(5)
if not file_url:
    raise SystemExit("–û—Ç—á—ë—Ç –Ω–µ –±—ã–ª –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")

# ========== –ß—Ç–µ–Ω–∏–µ CSV ==========
csv_text = requests.get(file_url).text
df = pd.read_csv(StringIO(csv_text), sep=';')
df["–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"] = pd.to_datetime(df.get("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"), errors='coerce')
# ========== –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∞–≤–æ–∫ ==========
deliveries = df[df["–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"].dt.date == yesterday.date()]
article_counts = deliveries.groupby("–ê—Ä—Ç–∏–∫—É–ª")["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].sum() if not deliveries.empty else pd.Series(dtype=int)

total_cost = sum(COST_PER_UNIT.get(article, 0) * qty for article, qty in article_counts.items())

# ========== –û—Å—Ç–∞—Ç–∫–∏ ==========
stock_url = "https://api-seller.ozon.ru/v2/analytics/stock_on_warehouses"
stock_resp = requests.post(stock_url, json={"limit": 1000, "offset": 0, "warehouse_type": "ALL"}, headers=HEADERS)
stock_resp.raise_for_status()
stock_rows = stock_resp.json().get("result", {}).get("rows", [])

stock_totals, promised_totals = {}, {}
for r in stock_rows:
    sku = r.get("sku")
    if sku is None:
        continue
    stock_totals[sku] = stock_totals.get(sku, 0) + (r.get("free_to_sell_amount") or 0)
    promised_totals[sku] = promised_totals.get(sku, 0) + (r.get("promised_amount") or 0)

# ========== Turnover/stocks ==========
turnover_url = "https://api-seller.ozon.ru/v1/analytics/turnover/stocks"
needed_skus = [ARTICLE_SKU_MAP[art] for art in article_counts.index if art in ARTICLE_SKU_MAP]
ads_by_sku, idc_by_sku = {}, {}
for chunk in chunks(needed_skus, 50):
    r = requests.post(turnover_url, json={"limit": len(chunk), "offset": 0, "sku": chunk}, headers=HEADERS)
    r.raise_for_status()
    for it in (r.json().get("items") or r.json().get("result", {}).get("items") or []):
        sku = it.get("sku")
        if sku is None:
            continue
        ads_by_sku[sku] = it.get("ads", 0) or 0
        idc_by_sku[sku] = it.get("idc", 0) or 0
    time.sleep(0.2)

# ========== –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ==========
transaction_url = "https://api-seller.ozon.ru/v3/finance/transaction/totals"
trans_resp = requests.post(transaction_url, json={"date": {"from": yesterday_from, "to": yesterday_to}, "posting_number": "", "transaction_type": "all"}, headers=HEADERS)
trans_resp.raise_for_status()
transaction_data = trans_resp.json().get("result", {})

table_data = {
    "–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã": transaction_data.get("accruals_for_sale", 0) or 0,
    "–∫–æ–º–∏—Å—Å–∏—è –û–∑–æ–Ω": transaction_data.get("sale_commission", 0) or 0,
    "–¥–æ—Å—Ç–∞–≤–∫–∞": transaction_data.get("processing_and_delivery", 0) or 0,
    "–≤–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã": transaction_data.get("refunds_and_cancellations", 0) or 0,
    "—É—Å–ª—É–≥–∏/—Ä–µ–∫–ª–∞–º–∞": transaction_data.get("services_amount", 0) or 0,
    "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏": transaction_data.get("compensation_amount", 0) or 0,
    "–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥–∞–≤—Ü–∞": transaction_data.get("money_transfer", 0) or 0,
    "–¥–æ–ø —É—Å–ª—É–≥–∏": transaction_data.get("others_amount", 0) or 0,
    "—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤": -total_cost
}

net_profit = (
    table_data["–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã"]
    + table_data["–∫–æ–º–∏—Å—Å–∏—è –û–∑–æ–Ω"]
    + table_data["–¥–æ—Å—Ç–∞–≤–∫–∞"]
    + table_data["–≤–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã"]
    + table_data["—É—Å–ª—É–≥–∏/—Ä–µ–∫–ª–∞–º–∞"]
    + table_data["–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"]
    + table_data["–¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥–∞–≤—Ü–∞"]
    + table_data["–¥–æ–ø —É—Å–ª—É–≥–∏"]
    + table_data["—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤"]
)
total_income = sum(v for k, v in table_data.items() if k != "—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤")
margin_percent = (net_profit / total_income) * 100 if total_income else 0
table_data["–∏—Ç–æ–≥–æ–≤–∞—è –º–∞—Ä–∂–∞"] = f"{net_profit:.2f} ({margin_percent:.2f}%)"

# ========== –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ==========
lines = [f"<b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏ –∑–∞ {yesterday.strftime('%d.%m.%Y')}</b>", "", "<u>üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º:</u>"]
items = []
for article, qty in article_counts.items():
    sku = ARTICLE_SKU_MAP.get(article)
    if sku is None:
        items.append({"article": article, "qty": int(qty), "sku": None, "idc": float('inf'), "free": 0, "promised": 0, "ads": 0, "missing_sku": True})
        continue
    items.append({"article": article, "qty": int(qty), "sku": sku, "idc": idc_by_sku.get(sku, float('inf')), "free": stock_totals.get(sku, 0), "promised": promised_totals.get(sku, 0), "ads": ads_by_sku.get(sku, 0), "missing_sku": False})
items.sort(key=lambda x: x["idc"] if x["idc"] is not None else float('inf'))
for it in items:
    if it["missing_sku"]:
        lines.append(f"üíé {escape(it['article'])}: {it['qty']} (–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ SKU –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
    else:
        lines.append(f"üíé {escape(it['article'])}: {it['qty']} (<b>{int(it['idc'])} –¥–Ω–µ–π –¥–æ 0</b>; –æ—Å—Ç–∞—Ç–∫–∏: {int(it['free'])}; –≤ –ø—É—Ç–∏: {int(it['promised'])}; –ø—Ä–æ–¥–∞–∂–∏: {it['ads']:.2f})")

lines.append("")
lines.append("<u>üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</u>")
base = table_data.get("–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã", 0) or 1
for key, val in table_data.items():
    if key == "–∏—Ç–æ–≥–æ–≤–∞—è –º–∞—Ä–∂–∞":
        lines.append(f"üìà {escape(key)}: {escape(val)}")
    else:
        emoji = "üü¢" if val > 0 else "üî¥"
        percent = (val / base) * 100
        lines.append(f"{emoji} {escape(key)}:\n{val:.2f} ({percent:.2f}%)")

output_text = "\n".join(lines)

# ========== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ==========
send_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
resp = requests.post(send_url, params={"chat_id": TELEGRAM_CHAT_ID, "text": output_text, "parse_mode": "HTML"})
print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram" if resp.status_code == 200 else f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {resp.status_code} {resp.text}")
